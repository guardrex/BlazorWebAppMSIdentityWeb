@page "/user-claims-server"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>User Claims</PageTitle>

<h1>User Claims</h1>

@if (claims.Count() > 0)
{
    <ul>
        @foreach (var claim in claims)
        {
            <li><b>@claim.Type:</b> @claim.Value</li>
        }
    </ul>
}

<p>
    User is in role 'Admin': @isAdmin
</p>

<p>
    User is in role 'Developer': @isDev
</p>

<AuthorizeView Roles="Admin">
    <Authorized>
        <p>User is an Admin in AuthorizeView</p>
    </Authorized>
    <NotAuthorized>
        <p>User is NOT an Admin in AuthorizeView</p>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="Developer">
    <Authorized>
        <p>User is an Developer in AuthorizeView</p>
    </Authorized>
    <NotAuthorized>
        <p>User is NOT an Developer in AuthorizeView</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private bool isAdmin;
    private bool isDev;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthState == null)
        {
            return;
        }

        var authState = await AuthState;
        claims = authState.User.Claims;

        var user = authState?.User;

        if (user is not null)
        {
            if (user.IsInRole("Admin"))
            {
                isAdmin = true;
            }

            if (user.IsInRole("Developer"))
            {
                isDev = true;
            }


        }
    }
}
